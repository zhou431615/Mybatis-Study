<?xml version="1.0" encoding="UTF8"?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhoujk.dao.UserMapper">

    <!--id statementId值  resultType返回值类型:UserVO-->
    <select id="selectUserById" resultType="UserVO" parameterType="int">
        /*在这里使用了SQL片段*/
        select
        <include refid="sqlCommon.sqlColumnComm"></include>
        from user
        where id = #{id}
    </select>


    <!--按照用户名称 模糊查询用户信息
    <select id="selectUserListByNameLike" resultType="UserVO" parameterType="String">
            select *
            from user
                /* # 防止sql注入写法*/
            where username like "%"#{userName}"%"
            /* $  字符串拼接写法
            where  username like '%${value}%'
               */
        </select>-->


    <!--resultMap用于解决 数据库表的列名 和Java类的属性不一致的问题
       resultMap  会自动把查询结果的列名与Java类型中的属性进行匹配
        匹配成功，就把值封装到对象
        匹配不成功， 就是Null或者0 如何去解决问题
        会对result或者id 进行一一对应 主键使用id标签 其他内容都是result-->
    <resultMap id="UserVO1ResultMap" type="UserVO">
        <!--主键对应-->
        <id column="userid" property="id"/>
        <!--非主键对应-->
        <result column="username" property="username"/>
        <result column="userpassword" property="password"/>
        <result column="userage" property="age"/>
        <result column="usersex" property="sex"/>
        <result column="user_hobby" property="userHobby"/>
        <result column="user_remark" property="remark"/>
    </resultMap>
    <!--    <select id="selectUserListBySexAndNameLike" resultMap="UserVO1ResultMap" parameterType="string">
            select
            <include refid="sqlCommon.sqlColumnComm"></include>
            from user1
            where usersex=#{param1} and
            username like "%"#{param2}"%"
        </select>-->
    <select id="selectUserListBySexAndNameLike" resultMap="UserVO1ResultMap" parameterType="String">
        select
        <include refid="sqlCommon.sqlColumnComm"></include>
        from user1
        where usersex = #{sex}
        <if test="username!=null and username.trim()!=null">
            and username like "%"#{username}"%"
        </if>
        <if test="age!=0">
            and userage=#{age}
        </if>
    </select>


    <select id="selectUserListByNameLike" resultMap="UserVO1ResultMap">
        select *
        from user1
        where username like "%"#{username}"%"
    </select>


    <!--按照姓名和年龄查询，如果没有填入信息，就直接按照张三查询-->
    <select id="selectUserListByNameAndAge" resultMap="UserVO1ResultMap">
        select *
        from user1
        where usersex = '男'
        <choose>
            <when test="username!=null and username.trim()!=''">
                and username=#{username}
            </when>
            <when test="age!=null">
                and userage=#{age}
            </when>
            <otherwise>
                and username='张三'
            </otherwise>
        </choose>
    </select>


    <!--selectUserListByNameAndAgeWhere1-->
    <!-- where拼接原理:
       where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。
       而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。
       -->
    <select id="selectUserListByNameAndAgeWhere1" resultMap="UserVO1ResultMap">
        select
        <include refid="sqlCommon.sqlColumnComm"></include>
        from user1
        <!-- 如果多出一个and,会自动清除。如果少个and或者多出多个and，会报错-->
        <where>
            <choose>
                <when test="username!=null and username.trim()!=''">
                    and username=#{username}
                </when>
                <when test="age!=null">
                    and userage=#{age}
                </when>
                <otherwise>
                    and username='张三'
                </otherwise>
            </choose>
        </where>
    </select>

    <select id="selectUserListByNameAndAgeWhere2" resultMap="UserVO1ResultMap">
        select
        <include refid="sqlCommon.sqlColumnComm"></include>
        from user1
        <where>
            <!--<choose>
                <when test="username!=null and username.trim()!=''">
                    and username=#{username}
                </when>
                <when test="age!=0">
                    and userage=#{age}
                </when>
                <otherwise>
                    and username='张三'
                </otherwise>
            </choose>-->
            <if test="username!=null and username.trim()!=''">
                and username=#{username}
            </if>
            <if test="age!=null">
                and userage=#{age}
            </if>
        </where>
    </select>

    <!--根据用户输入更新用户信息-->
    <update id="updateUser" parameterType="UserPOJO">
        update user1
        <trim prefix="set" suffixOverrides=",">
            <if test="username!=null  and username.trim()!=''">
                username=#{username},
            </if>
            <if test="password!=null and password.trim()!=''">
                userpassword=#{password},
            </if>
            <if test="age!=null">
                userage=#{age},
            </if>
            <if test="sex!=null and  sex.trim()!=''">
                usersex=#{sex},
            </if>
            <if test="userHobby!=null and userHobby.trim()!=''">
                user_hobby=#{userHobby},
            </if>
            <if test="remark!=null  and  remark.trim()!=''">
                user_remark=#{remark},
            </if>
        </trim>
        where userid=#{id}
    </update>

    <select id="selectUserListBySexOrAge" resultMap="UserVO1ResultMap">
        select *
        from user1
        where
        <trim prefixOverrides="or">
            <if test="sex!=null and sex.trim()!=''">
                or usersex=#{sex}
            </if>
            <if test="age!=null">
                or userage=#{age}
            </if>
        </trim>

    </select>

    <update id="updateUserBySet" parameterType="UserPOJO">
        update user1
        <set>
            <if test="username!=null  and username.trim()!=''">
                username=#{username},
            </if>
            <if test="password!=null and password.trim()!=''">
                userpassword=#{password},
            </if>
            <if test="age!=null">
                userage=#{age},
            </if>
            <if test="sex!=null and  sex.trim()!=''">
                usersex=#{sex},
            </if>
            <if test="userHobby!=null and userHobby.trim()!=''">
                user_hobby=#{userHobby},
            </if>
            <if test="remark!=null  and  remark.trim()!=''">
                user_remark=#{remark},
            </if>
        </set>
        where userid=#{id}
    </update>


    <!--select * from  table where column  in  (1,2,3,4,5)-->
    <select id="selectUserListByIds" resultMap="UserVO1ResultMap" parameterType="Integer[]">
        select
        <include refid="sqlCommon.sqlColumnComm"></include>
        from user1
        where userid in
        <foreach collection="Ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>


</mapper>